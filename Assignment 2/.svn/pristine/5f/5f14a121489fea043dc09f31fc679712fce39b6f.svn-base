package driver;

// **********************************************************
// Assignment2:
// UTOR user_name1: guptaak2
// UTOR user_name2: ahmadab2
// UTOR user_name3: abbass13
// UTOR user_name4: mangats2
//
// Author1: Akhil Gupta
// Author2: Abdul Ahad Ahmad
// Author3: Syed M Farjad Abbas
// Author4: Satbir Mangat
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC 207 and understand the consequences.
// *********************************************************

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class JShell {

  public static void main(String[] args) throws IOException {
    Directory dir = new Directory("/");
    File curDir = dir;
    System.out.println(dir.subDirs);
    // mkdir mk = new mkdir();
    // //pwd pwd = new pwd(dir.getSubDirs().get(1));
    // mk.addDirectoryRelative("hello", dir);
    // mk.addDirectoryRelative("sup", dir.getSubDirs().get(1));
    // mk.addDirectoryRelative("sup", dir.getSubDirs().get(1));
    // pwd pwd1 = new pwd(dir.getSubDirs().get(1));
    // ls hello = new ls(dir.getSubDirs().get(1));

    boolean run_prompt = true;
    // while loop to continue running command prompt
    while (run_prompt) {
      String user_input;
      int StartQuote = -1;
      int EndQuote = -1;

      String invalidChar = "!@$&*()?:[]`|={},;";
      boolean commandValidity = true;

      cd cd = new cd();
      // cd.setCurDir(dir);
      // System.out.println(dir.getSubDirs());

      Scanner in = new Scanner(System.in);
      // asks user to enter command after "/#: "
      System.out.print("/#: ");
      user_input = in.nextLine();


      // splits user_input in a list
      String[] input = user_input.split(" +");

      for (int i = 0; i < user_input.length(); i++) {
        if (user_input.charAt(i) == '"' && StartQuote < 0) {
          StartQuote = i;
        } else if (user_input.charAt(i) == '"' && StartQuote >= 0) {
          EndQuote = i;
        }
      }
      String content = null;
      // System.out.println(user_input.subSequence(StartQuote+1, EndQuote));
      if (EndQuote > StartQuote) {
        content = (String) user_input.subSequence(StartQuote + 1, EndQuote);
      }



      if (user_input.equals("exit")) {
        // Case 1: "exit", it quits the program
        System.exit(0);

      } else if (!commandValidity) {
        System.out.println("Invalid command, please try again.");
      } else if (input[0].equals("man") && input.length == 2) {

        man manual = new man(input[1]);

      } else if (input[0].equals("mkdir") && input.length > 1) {



        // Case 2: "mkdir"
        mkdir addDir = new mkdir();
        addDir.addAll(input, dir, curDir);



        // System.out.println(dir.subDirs);

      } else if (input[0].equals("cd") && input.length == 2) {
        cd ChangeDir = new cd();
        curDir = ChangeDir.ChangeDirectory(input[1], dir, curDir);
        // System.out.println(ChangeDir.currentDir);



      }

      else if (input[0].equals("ls")) {
        // Case 4: "ls"
        // System.out.println(input[0]);
        // ls ListDir = new ls(cd.getCurDir());
        if (input.length == 1) {
          ls ListDir = new ls(curDir);
        } else {

          ls ListPath = new ls(input[1], dir);
        }

      } else if (input[0].equals("pwd")) {
        // Case 5: "pwd"
        pwd printDir = new pwd(curDir);
        // System.out.println(cd.getCurDir());

      } else if (input[0].equals("mv") && input.length == 3) {

        // Case 6: "mv"
        // System.out.println(input[0]);
        // System.out.println(input[1] + " " + input[2]);
        mv mover = new mv();
        mover.move(input[1], input[2], dir, curDir);

      } else if (input[0].equals("cp") && input.length == 3) {
        // Case 7: "cp"
        // System.out.println(input[0]);
        // System.out.println(input[1] + " " + input[2]);
        cp copier = new cp();
        copier.copy(input[1], input[2], dir, curDir);

      } else if (input[0].equals("cat") && input.length == 2) {
        // Case 8: "cat"
        // System.out.println(input[0]);
        Cat viewContent = new Cat();
        viewContent.viewContents(input[1], dir, curDir);


      } else if (input[0].equals("echo") && content != null
          && input[input.length - 2].equals(">")) {
        // Case 9: "echo" with ">"

        Echo contentFile =
            new Echo(content, input[input.length - 1], dir, curDir, ">");



      } else if (input[0].equals("echo") && content != null
          && input[input.length - 2].equals(">>")) {
        // Case 10: "echo" with ">>"
        Echo contentFile =
            new Echo(content, input[input.length - 1], dir, curDir, ">>");

      } else {
        // Case 12: user enters invalid command
        System.out.println("Invalid command, please try again.");
      }
    }
  }

  // @Override
  // public String toString() {
  // return "JShell [getClass()=" + getClass() + ", hashCode()="
  // + hashCode() + ", toString()=" + super.toString() + "]";
  // }
}
